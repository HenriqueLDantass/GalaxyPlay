
  Future<void> obterMessageTopics(String uid) async {
    try {
      // Obtém a referência ao documento do usuário
      var userDocRef =
          FirebaseFirestore.instance.collection('usuarios').doc(uid);

      // Obtém o documento do usuário
      DocumentSnapshot userDoc = await userDocRef.get();

      //  Verifica se o documento existe
      if (userDoc.exists) {
        //  Obtém a lista 'messageTopics' do documento
        List<dynamic> messageTopics = userDoc['topics'][0]['messageTopics'];

        //  Itera sobre os 'messageTopics' e imprime os dados
        for (var messageTopic in messageTopics) {
          print('Mensagem: $messageTopic');
          //    Adicione o código para processar as mensagens conforme necessário
        }
      } else {
        print('Usuário não encontrado para o ID: $uid');
      }
    } catch (e) {
      print('Erro ao obter dados do usuário: $e');
    }
  }


  Form(
          key: _formKey,
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              TextFormField(
                controller: controllerUser.emailController,
                decoration: const InputDecoration(
                  labelText: 'E-mail',
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return "Campo vazio ou incorreto";
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16.0),
              TextFormField(
                  controller: controllerUser.passwordController,
                  obscureText: true,
                  decoration: const InputDecoration(
                    labelText: 'Senha',
                  ),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return "Campo vazio ou incorreto";
                    }
                    return null;
                  }),
              const SizedBox(height: 24.0),
              GetX<AuthController>(
                builder: (loginController) {
                  return SizedBox(
                    width: 250,
                    height: 50,
                    child: ElevatedButton(
                      style: ButtonStyle(
                        shape:
                            MaterialStateProperty.all<RoundedRectangleBorder>(
                          RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(20.0),
                          ),
                        ),
                      ),
                      onPressed: loginController.isloading.value
                          ? null
                          : () async {
                              if (_formKey.currentState!.validate()) {
                                await controller.login(
                                  email: controllerUser.emailController.text,
                                  password:
                                      controllerUser.passwordController.text,
                                );

                                Get.toNamed(NamedRoutes.home);
                              }
                            },
                      child: loginController.isloading.value
                          ? const CircularProgressIndicator()
                          : const Text('Entrar'),
                    ),
                  );
                },
              ),
            ],
          ),
        ),